"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1531],{5899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(4848),i=n(8453);const o={},r="Shared Chat",a={id:"chat/shared-chat",title:"Shared Chat",description:"Supported since v1.22.0",source:"@site/versioned_docs/version-1.x/chat/shared-chat.mdx",sourceDirName:"chat",slug:"/chat/shared-chat",permalink:"/chat/shared-chat",draft:!1,unlisted:!1,editUrl:"https://github.com/twitch4j/twitch4j.github.io/tree/master/docs/versioned_docs/version-1.x/chat/shared-chat.mdx",tags:[],version:"1.x",lastUpdatedBy:"iProdigy",lastUpdatedAt:1727029657e3,frontMatter:{},sidebar:"version-1.x-docs",previous:{title:"Send Private Message",permalink:"/chat/send-private-message"},next:{title:"EventSub",permalink:"/eventsub/"}},h={},c=[{value:"How do I detect Shared Chat messages?",id:"how-do-i-detect-shared-chat-messages",level:2},{value:"What does this mean for my application?",id:"what-does-this-mean-for-my-application",level:2},{value:"What edge cases should I know about?",id:"what-edge-cases-should-i-know-about",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"shared-chat",children:"Shared Chat"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Supported since v1.22.0"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Twitch now allows creators using Stream Together to effectively merge their chat rooms together.\nIn the future, Twitch will also allow Shared Chat sessions without mandating Stream Together usage."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"A Stream Together session currently supports up to six (6) participating channels.\nUpon joining a Stream Together session, a broadcaster has a limited window of time wherein they can opt out of shared chat."})}),"\n",(0,s.jsx)(t.p,{children:"From a user's perspective, their chat window includes more messages (sourced from the other channels)\nand when they send a message, it is automatically shared with those other channels.\nAs messages arrive, the first-party interface includes the profile picture of the channel the message is sourced from."}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"Update to Twitch4J v1.22.0 (or later) to avoid edge cases where your bot could spam responses to Shared Chat messages."}),(0,s.jsx)(t.p,{children:"By default, we drop mirrored messages that have already been observed, so each unique message is only acted upon once.\nIf you run a distributed bot, you will need to write Shared Chat logic yourself to avoid such edge cases."})]}),"\n",(0,s.jsxs)(t.p,{children:["As a result, each user message (",(0,s.jsx)(t.code,{children:"PRIVMSG"}),") sent in one chat is mirrored to the other chats in the Shared Chat session."]}),"\n",(0,s.jsxs)(t.p,{children:["Similarly, most user notifications (",(0,s.jsx)(t.code,{children:"USERNOTICE"}),") are also shared with the other chat rooms in the session.",(0,s.jsx)(t.br,{}),"\n","In particular, subs, resubs, sub gifts, community sub gifts, gift paid upgrades, prime paid upgrades, pay it forward gifts,\nincoming raids, and mod announcements are forwarded (while bits badge unlocks and charity donations are not forwarded)."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Twitch has suggested that the current set of supported ",(0,s.jsx)(t.code,{children:"USERNOTICE"})," types that are forwarded during shared chat\nis subject to change."]})}),"\n",(0,s.jsxs)(t.p,{children:["In addition, moderation actions (i.e., ban, timeout, unban, untimeout) in one channel are automatically applied to all channels in the Shared Chat session.\nMessage deletions are mirrored to the other channels ",(0,s.jsx)(t.em,{children:"if"})," the deletion occurred in the source channel.\nSince IRC tags do not indicate the source channel of mirrored moderation events, you can obtain this information via\n",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/eventsub/subscriptions/SubscriptionTypes.html#CHANNEL_MODERATE",children:"EventSub"})," instead."]}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["You can detect which channels are participating in a given Shared Chat session\nvia ",(0,s.jsx)(t.a,{href:"https://dev.twitch.tv/docs/api/reference/#get-shared-chat-session",children:(0,s.jsx)(t.code,{children:"TwitchHelix#getSharedChatSession(OAuth2Credential, String)"})}),",\nwhere the second argument is a channel's ID.",(0,s.jsx)(t.br,{}),"\n","This endpoint does not require any scopes, so even app access tokens are sufficient."]}),(0,s.jsx)(t.p,{children:"Similarly, there are EventSub subscription types to track Shared Chat session updates in real-time."})]}),"\n",(0,s.jsxs)(t.p,{children:["You can read more about this feature in the ",(0,s.jsx)(t.a,{href:"https://dev.twitch.tv/docs/chat/irc/#shared-chat",children:"official third-party developer documentation"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"While this page focuses on IRC, these concepts also apply to the chat-related EventSub subscription types."})}),"\n",(0,s.jsx)(t.h2,{id:"how-do-i-detect-shared-chat-messages",children:"How do I detect Shared Chat messages?"}),"\n",(0,s.jsxs)(t.p,{children:["IRC events that can be mirrored during the Shared Chat session implement the ",(0,s.jsx)(t.code,{children:"MirrorableEvent"})," interface."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"MirrorableEvent#isMirrored"})," tells you whether the given event originally came from a different source channel."]}),"\n",(0,s.jsxs)(t.p,{children:["Then you can use ",(0,s.jsx)(t.code,{children:"MirrorableEvent#getSourceChannelId"})," to obtain the true source channel."]}),"\n",(0,s.jsxs)(t.p,{children:["Further, you can use ",(0,s.jsx)(t.code,{children:"MirrorableEvent#getSourceBadges"})," (and ",(0,s.jsx)(t.code,{children:"MirrorableEvent#getSourceBadgeInfo"}),")\nto obtain the chat badges associated with the message in the source channel."]}),"\n",(0,s.jsxs)(t.p,{children:["When messages are mirrored, they are assigned new message IDs,\nso you can obtain the original message ID via ",(0,s.jsx)(t.code,{children:"MirrorableEvent#getSourceMessageId"})," (which is unnecessary for most bots)."]}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["The following EventSub subscription types also distinguish shared events:\n",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/eventsub/subscriptions/SubscriptionTypes.html#CHANNEL_CHAT_MESSAGE",children:(0,s.jsx)(t.code,{children:"channel.chat.message"})}),",\n",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/eventsub/subscriptions/SubscriptionTypes.html#CHANNEL_CHAT_NOTIFICATION",children:(0,s.jsx)(t.code,{children:"channel.chat.notification"})}),",\nand ",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/eventsub/subscriptions/SubscriptionTypes.html#CHANNEL_MODERATE",children:(0,s.jsx)(t.code,{children:"channel.moderate"})}),"."]}),(0,s.jsxs)(t.p,{children:["Please read the ",(0,s.jsx)(t.a,{href:"https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types/",children:"Twitch documentation"}),"\nor the ",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/eventsub/events/package-summary.html",children:"javadoc"}),"\nto understand the updated event payloads."]})]}),"\n",(0,s.jsx)(t.h2,{id:"what-does-this-mean-for-my-application",children:"What does this mean for my application?"}),"\n",(0,s.jsxs)(t.p,{children:["Now, when you receive a message (e.g., ",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/chat/events/channel/ChannelMessageEvent.html",children:(0,s.jsx)(t.code,{children:"ChannelMessageEvent"})}),"),\nit could be directly sent to the channel you have joined (i.e., ",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/chat/events/AbstractChannelEvent.html",children:(0,s.jsx)(t.code,{children:"AbstractChannelEvent#getChannel"})}),"),\nor it could be mirrored from another channel (i.e., ",(0,s.jsx)(t.code,{children:"MirrorableEvent#getSourceChannelId"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"Most moderation bots may not need to change their logic regarding acting upon user messages.\nIf such a bot observes the same message twice, it may try to execute duplicate moderation actions, but that is not a substantial concern."}),"\n",(0,s.jsxs)(t.p,{children:["However, bots that respond to chat commands ",(0,s.jsx)(t.strong,{children:"should"})," avoid replying to duplicated shared messages.",(0,s.jsx)(t.br,{}),"\n","The simplest approach is to ignore chat commands where ",(0,s.jsx)(t.code,{children:"MirrorableEvent#isMirrored"})," is true.",(0,s.jsx)(t.br,{}),"\n","More sophisticated bots can conditionally reply to mirrored messages if the bot is not joined to the source channel and the source message id has not been observed already."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Twitch4J v1.22.0+ automatically drops duplicate mirrored messages, so most developers will not need to update any logic!\nYou can adjust the library's treatment of Shared Chat messages via ",(0,s.jsx)(t.code,{children:"MirroredMessagePolicy"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"what-edge-cases-should-i-know-about",children:"What edge cases should I know about?"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The main edge case to consider is when your bot is joined to multiple channels in a single Shared Chat session.",(0,s.jsx)(t.br,{}),"\n","As a result, for each user message, you could receive up to six (6) events!\nWhen user messages can trigger bot responses in chat, you should validate the source channel to avoid replying up to six times.\nSince messages are mirrored, all six response messages would appear in each of the six chat rooms (which can look like spam).",(0,s.jsx)(t.br,{}),"\n","However, when using ",(0,s.jsx)(t.code,{children:"MirroredMessagePolicy.REJECT_IF_OBSERVED"})," (or ",(0,s.jsx)(t.code,{children:"REJECT_ALL"}),"), this concern does not apply\n(unless you are running a distributed bot across multiple servers)."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"When your bot is joined to multiple channels in a single Shared Chat session, the two channels could have\ndifferent configurations for the bot, which can complicate determination of appropriate responses."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Since moderation actions are forwarded, the stricter response will tend to prevail (as timed-out users can be banned, but banned users cannot be timed-out)."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["While channel points redemptions with text input ",(0,s.jsx)(t.em,{children:"are"})," mirrored to the other channels, currently redemptions without user input are not."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Mirrored channel points redemptions (with user input) lack context as to what reward was redeemed."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Channel-specific emotes ",(0,s.jsx)(t.em,{children:"do"})," render accurately in the mirrored channels (in first-party chat), including cheermotes and follower emotes."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["If your bot is ",(0,s.jsx)(t.code,{children:"/restrict"}),"ed in one channel in the Shared Chat session, it cannot send messages to other channels in the session (unless it is a moderator)."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Neither the ",(0,s.jsx)(t.code,{children:"first-msg"})," nor the ",(0,s.jsx)(t.code,{children:"returning-chatter"})," flags are populated on the mirrored messages."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"When sending messages to a channel in a Shared Chat session, if you are joined to other channels\nin the same session on a different websocket, you will receive events for your own messages.\nHowever, if the other channels are joined on the same websocket, you will not receive events for your own messages."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["If you are joined to many channels and start observing random disconnects, some channels may have started Shared Chat sessions causing your message buffer to fill up.\nAs a workaround, you can reduce the number of channels joined on each websocket connection via\n",(0,s.jsx)(t.a,{href:"https://twitch4j.github.io/javadoc/com/github/twitch4j/common/pool/SubscriptionConnectionPool.SubscriptionConnectionPoolBuilder.html#maxSubscriptionsPerConnection(int)",children:(0,s.jsx)(t.code,{children:"TwitchChatConnectionPoolBuilder#maxSubscriptionsPerConnection"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Since this feature is complex and not widely tested yet, there may be bugs in Twitch's implementation."}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);